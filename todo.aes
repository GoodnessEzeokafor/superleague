/**
    AETERNITY SUPERHEROLEAGUE

    REFERENCES
        * https://blockgeeks.com/guides/smart-contracts/
        * https://github.com/aeternity/aesophia/blob/lima/docs/sophia.md#language-features
        * https://github.com/aeternity/aesophia/blob/lima/docs/sophia.md
        * https://github.com/aeternity/aesophia/blob/lima/docs/sophia_stdlib.md

    SMART CONTRACT:

        * According to Wikipedia A smart contract is a computer program or a transaction protocol which is intended to automatically execute, 
        control or document legally relevant events and actions according to the terms of a contract or an agreement.
        
        * Basically a smart contract is a code thats stores or runs on the blockchain
        
        * Smart contracts help you exchange money, property, shares, or anything of value in a transparent, 
            conflict-free way while avoiding the services of a middleman.

        * Vitalik explanation of a smart contract 
            " an asset or currency is transferred into a program â€œand the program runs this code and at some point it 
              automatically validates a condition and it automatically 
            determines whether the asset should go to one person or back to the other
             person, 
            or whether it should be immediately refunded to the person who sent it or some combination thereof."
    
    BENEFITS OF SMART CONTRACTS
        * Autonomy
        * Trust 
        * Backup 
        * Safety
        * Accuracy

    SOPHIA LANGUAGE FEATURE

        LAYOUT BLOCKS 

            Sophia uses Python-style layout rules to group declarations and statements. 
            A layout block with more than one element must start on a separate line and be indented more than the currently enclosing layout block. 
            Blocks with a single element can be written on the same line as the previous token.
            Each element of the block must share the same indentation and no part of an element may be indented less than the indentation of the block. For instance

        MAP/RECORDS: A Sophia record type is given by a fixed set of fields with associated, possibly different, types. For instance

             record todolist={
                        id:int,
                        todo:string, 
                        creator:address, 
                        created:int, 
                        completed:bool} 

        STATE : A user defined type holding the contract state	
             
              record state={
                // monitors the state of our contract
                index_counter:int,
                todolists:map(int, todolist)}
    LIST
        A Sophia list is a dynamically sized, homogenous, immutable, singly linked list. 
        A list is constructed with the syntax [1, 2, 3].
        EXAMPLES:
                [1, 33, 2, 666]
                ['abc','acb', 'bca']                                                   : list(int)
                [(1, "aaa"), (10, "jjj"), (666, "the beast")] 
**/

contract TodoList =
    record todolist={
        id:int,
        todo:string, // todo content
        creator:address, // address of the todo creator
        created:int, // block timestamp
        completed:bool} // bolean}
    record state={
        // monitors the state of our contract
        index_counter:int,
        todolists:map(int, todolist)}
    
    stateful entrypoint init() =
        {index_counter=0, todolists={}}
    
    stateful entrypoint add_new_todolist(_todo:string)=
        if(_todo != "")
            let index = state.index_counter + 1
            let new_todo = {id=index,todo=_todo, creator=Call.caller,created=Chain.timestamp, completed=false}
            put(state{todolists[index]=new_todo, index_counter=index})
        

    
    entrypoint get_todolist_length():int=
        state.index_counter
    
    entrypoint get_todolist_by_index(_index:int)=
        switch(Map.lookup(_index, state.todolists))
            None => abort("There was no Todolist with this index")
            Some(x) => x
    

    stateful entrypoint complete_todo(_index:int)=
        let get_todo = get_todolist_by_index(_index)
        let new_todo = {
            id=get_todo.id,
            todo=get_todo.todo,
            creator=get_todo.creator,
            created=get_todo.created,
            completed=true}
        put(state{todolists[get_todo.id] = new_todo})
    

    // stateful entrypoint delete_todo(_owner:address)=
    //     switch(Map.lookup(_owner, state.todolists))
    //     Some(x) => put(state{todolists = Map.delete(_owner,state.todolists)})
        
