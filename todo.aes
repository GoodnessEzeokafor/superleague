contract TodoList =
    record todolist={
        id:int,
        todo:string, // todo content
        creator:address, // address of the todo creator
        created:int, // block timestamp
        completed:bool} // bolean}
    record state={
        // monitors the state of our contract
        index_counter:int,
        todolists:map(int, todolist)}
    
    stateful entrypoint init() =
        {index_counter=0, todolists={}}
    
    stateful entrypoint add_new_todolist(_todo:string)=
        if(_todo != "")
            let index = state.index_counter + 1
            let new_todo = {id=index,todo=_todo, creator=Call.caller,created=Chain.timestamp, completed=false}
            put(state{todolists[index]=new_todo, index_counter=index})
        

    
    entrypoint get_todolist_length():int=
        state.index_counter
    
    entrypoint get_todolist_by_index(_index:int)=
        switch(Map.lookup(_index, state.todolists))
            None => abort("There was no Todolist with this index")
            Some(x) => x
    

    stateful entrypoint complete_todo(_index:int)=
        let get_todo = get_todolist_by_index(_index)
        let new_todo = {
            id=get_todo.id,
            todo=get_todo.todo,
            creator=get_todo.creator,
            created=get_todo.created,
            completed=true}
        put(state{todolists[get_todo.id] = new_todo})
    

    // stateful entrypoint delete_todo(_owner:address)=
    //     switch(Map.lookup(_owner, state.todolists))
    //     Some(x) => put(state{todolists = Map.delete(_owner,state.todolists)})
        
